{"version":3,"sources":["socketio.js"],"names":[],"mappings":";;AAAA;;;;AAIA,OAAO,OAAP,GAAiB,UAAU,IAAV,EAAgB;AAC7B,QAAM,KAAK,QAAQ,WAAR,EAAqB,IAArB,CAAX;;AAEA;AACA;AACA,QAAI,YAAY,EAAhB;;AAEJ;AACI,QAAI,QAAQ,CAAC,OAAD,EAAS,OAAT,EAAiB,OAAjB,CAAZ;;AAEA,OAAG,OAAH,CAAW,EAAX,CAAc,YAAd,EAA4B,UAAU,MAAV,EAAkB;;AAE1C;AACA,eAAO,EAAP,CAAU,SAAV,EAAqB,UAAU,IAAV,EAAgB;;AAGjC;AACA,mBAAO,IAAP,GAAc,OAAd;;AAEA;AACA,mBAAO,IAAP,CAAY,OAAZ;AACA,oBAAQ,GAAR,CAAY,kBAAkB,IAA9B;AACH,SATD;;AAWA;AACA,eAAO,EAAP,CAAU,UAAV,EAAsB,UAAU,IAAV,EAAgB;AAClC;AACA,oBAAQ,GAAR,CAAY,cAAc,KAAK,SAAL,CAAe,IAAf,CAA1B;AACA;AACA,mBAAO,SAAP,CAAiB,IAAjB,CAAsB,YAAtB,EAAoC,IAApC;AACH,SALD;;AAOA,eAAO,EAAP,CAAU,YAAV,EAAwB,YAAU;AAC9B;AACA,mBAAO,UAAU,OAAO,QAAjB,CAAP;AACA;AACA,eAAG,OAAH,CAAW,IAAX,CAAgB,aAAhB,EAA+B,SAA/B;AACA;AACA,mBAAO,SAAP,CAAiB,IAAjB,CAAsB,YAAtB,EAAoC,QAApC,EAA8C,OAAO,QAAP,GAAkB,mBAAhE;AACA,mBAAO,KAAP,CAAa,OAAO,IAApB;AACH,SARD;AASH,KA/BD;AAgCH,CA1CD","file":"socketio-compiled.js","sourcesContent":["/**\n * Created by zh355245849 on 2016/11/30.\n */\n\nmodule.exports = function (http) {\n    const io = require('socket.io')(http)\n\n    // Listen for a connection\n    // usernames which are currently connected to the chat\n    var usernames = {};\n\n// rooms which are currently available in chat\n    var rooms = ['room1','room2','room3'];\n\n    io.sockets.on('connection', function (socket) {\n\n        // when the client emits 'adduser', this listens and executes\n        socket.on('adduser', function (room) {\n\n\n            // store the room name in the socket session for this client\n            socket.room = 'room1';\n\n            // send client to room 1\n            socket.join('room1');\n            console.log(\"join room1   \" + room)\n        });\n\n        // when the client emits 'sendchat', this listens and executes\n        socket.on('sendchat', function (data) {\n            // we tell the client to execute 'updatechat' with 2 parameters\n            console.log(\"message  \" + JSON.stringify(data))\n            // console.log(socket);\n            socket.broadcast.emit('updatechat', data);\n        });\n\n        socket.on('disconnect', function(){\n            // remove the username from global usernames list\n            delete usernames[socket.username];\n            // update list of users in chat, client-side\n            io.sockets.emit('updateusers', usernames);\n            // echo globally that this client has left\n            socket.broadcast.emit('updatechat', 'SERVER', socket.username + ' has disconnected');\n            socket.leave(socket.room);\n        });\n    })\n}\n"]}
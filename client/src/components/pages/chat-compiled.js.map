{"version":3,"sources":["chat.js"],"names":[],"mappings":"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","file":"chat-compiled.js","sourcesContent":["/**\n * Created by zh355245849 on 2016/11/26.\n */\n// app-client.js\nimport React, { Component } from 'react'\nimport { render } from 'react-dom'\nimport io from 'socket.io-client'\nimport uuid from 'node-uuid'\nimport S from 'shorti'\nimport _ from 'lodash'\nimport { Input } from 'react-bootstrap'\n\nclass chat extends Component {\n\n    constructor() {\n        super()\n        this.state = {\n            data: {\n                messages: []\n            }\n        }\n    }\n\n    componentDidMount() {\n        let data = this.state.data\n        setTimeout(() => {\n            this.refs.author.refs.input.focus()\n        }, 100)\n        const socket = io()\n        // Listen for messages coming in\n        socket.on('chat message')\n    }\n\n    componentDidUpdate() {\n        if (this.refs.message)\n            this.refs.message.refs.input.focus()\n        if (this.refs.messages_scroll_area)\n            this.refs.messages_scroll_area.scrollTop = this.refs.messages_scroll_area.scrollHeight\n    }\n\n    setAuthor() {\n        const author = this.refs.author.refs.input.value.trim()\n        if (!author)\n            return\n        this.refs.author.refs.input.value = ''\n        const messages = this.state.data.messages\n        this.setState({\n            data: {\n                author,\n                messages\n            }\n        })\n    }\n\n    createMessage() {\n        const data = this.state.data\n        const messages = data.messages\n        const socket = io()\n        console.log(this.refs)\n        const message_text = this.refs.message.refs.input.value.trim()\n        if (!message_text)\n            return\n        const message_emit = {\n            message: message_text,\n            author: data.author\n        }\n        // Send message out\n        socket.emit('chat message', message_emit)\n        // Render to browser\n        const message_browser = {\n            _id: uuid.v1(),\n            metafield: {\n                author: {\n                    value: data.author\n                },\n                message: {\n                    value: message_text\n                }\n            }\n        }\n        messages.push(message_browser)\n        this.setState({\n            data: {\n                author: data.author,\n                messages\n            }\n        })\n        this.refs.message.refs.input.value = ''\n    }\n\n    handleSubmit(e) {\n        e.preventDefault()\n        const data = this.state.data\n        if (data.author)\n            this.createMessage()\n        else\n            this.setAuthor()\n    }\n\n    render() {\n        const data = this.state.data\n        let form_input\n        if (!data.author) {\n            form_input = (\n                <div>\n                    Hi, what is your name?<br />\n                    <Input type=\"text\" ref=\"author\" />\n                </div>\n            )\n        } else {\n            form_input = (\n                <div>\n                    Hello { data.author }, type a message:<br />\n                    <Input type=\"text\" ref=\"message\" />\n                </div>\n            )\n        }\n        const messages = data.messages\n        let messages_list\n        if (messages) {\n            // order by created\n            const sorted_messages = _.sortBy(messages, message => {\n                return message.created\n            })\n            messages_list = sorted_messages.map(message_object => {\n                if (message_object) {\n                    return (\n                        <li style={ { listStyle: 'none', ...S('mb-5') } } key={ message_object._id }>\n                            <b>{ message_object.metafield.author.value }</b><br/>\n                            { message_object.metafield.message.value }\n                        </li>\n                    )\n                }\n            })\n        }\n        const scroll_area_style = {\n            ...S('h-' + (window.innerHeight - 140)),\n            overflowY: 'scroll'\n        }\n        return (\n            <div>\n                <div style={ S('pl-15') }>\n                    <h2>React Chat Channel</h2>\n                    <div ref=\"messages_scroll_area\" style={ scroll_area_style }>\n                        <ul style={ S('p-0') }>{ messages_list }</ul>\n                    </div>\n                </div>\n                <div style={ S('absolute b-0 w-100p pl-15 pr-15') }>\n                    <form onSubmit={ this.handleSubmit.bind(this) }>\n                        { form_input }\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default chat\n"]}